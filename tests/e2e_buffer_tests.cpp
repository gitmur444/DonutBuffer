#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <cassert>
#include <cstdlib>
#include <regex>
#include <memory>

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞
std::string exec_command(const std::string& cmd) {
    char buffer[128];
    std::string result = "";
    std::unique_ptr<FILE, decltype(&pclose)> pipe(popen(cmd.c_str(), "r"), pclose);
    if (!pipe) {
        throw std::runtime_error("popen() failed!");
    }
    while (fgets(buffer, sizeof buffer, pipe.get()) != nullptr) {
        result += buffer;
    }
    return result;
}

// –ö–ª–∞—Å—Å –¥–ª—è e2e —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è BufferRunner
class BufferRunnerE2ETests {
private:
    std::string executable_path;
    
public:
    BufferRunnerE2ETests(const std::string& exe_path) : executable_path(exe_path) {}
    
    void test_default_parameters() {
        std::cout << "Testing default parameters..." << std::endl;
        
        std::string cmd = executable_path;
        std::string output = exec_command(cmd);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å –∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ
        assert(output.find("Running mutex with P=1 C=1") != std::string::npos);
        assert(output.find("Finished in") != std::string::npos);
        assert(output.find("items/sec") != std::string::npos);
        
        std::cout << "‚úì Default parameters test passed" << std::endl;
    }
    
    void test_lockfree_type() {
        std::cout << "Testing lockfree type..." << std::endl;
        
        std::string cmd = executable_path + " --type=lockfree";
        std::string output = exec_command(cmd);
        
        assert(output.find("Running lockfree with P=1 C=1") != std::string::npos);
        assert(output.find("Finished in") != std::string::npos);
        
        std::cout << "‚úì Lockfree type test passed" << std::endl;
    }
    
    void test_multiple_producers_consumers() {
        std::cout << "Testing multiple producers and consumers..." << std::endl;
        
        std::string cmd = executable_path + " --type=lockfree --producers=3 --consumers=2";
        std::string output = exec_command(cmd);
        
        assert(output.find("Running lockfree with P=3 C=2") != std::string::npos);
        assert(output.find("Finished in") != std::string::npos);
        
        std::cout << "‚úì Multiple producers/consumers test passed" << std::endl;
    }
    
    void test_performance_reasonable() {
        std::cout << "Testing performance is reasonable..." << std::endl;
        
        std::string cmd = executable_path + " --type=lockfree --producers=2 --consumers=2";
        std::string output = exec_command(cmd);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ items/sec –∏–∑ –≤—ã–≤–æ–¥–∞
        std::regex perf_regex(R"((\d+(?:\.\d+)?(?:e\+?\d+)?)\s+items/sec)");
        std::smatch match;
        
        if (std::regex_search(output, match, perf_regex)) {
            double items_per_sec = std::stod(match[1].str());
            std::cout << "Performance: " << items_per_sec << " items/sec" << std::endl;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑—É–º–Ω–∞—è (–±–æ–ª—å—à–µ 10K items/sec)
            assert(items_per_sec > 10000.0);
            std::cout << "‚úì Performance test passed" << std::endl;
        } else {
            std::cerr << "‚ùå Could not parse performance from output: " << output << std::endl;
            assert(false);
        }
    }
    
    void test_invalid_type() {
        std::cout << "Testing invalid buffer type..." << std::endl;
        
        std::string cmd = executable_path + " --type=invalid 2>&1";
        std::string output = exec_command(cmd);
        
        // –ü—Ä–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —Ç–∏–ø–µ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mutex –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        // –∏–ª–∏ –≤—ã–¥–∞—Ç—å –æ—à–∏–±–∫—É (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
        assert(output.find("Running") != std::string::npos || 
               output.find("Unknown") != std::string::npos);
        
        std::cout << "‚úì Invalid type test passed" << std::endl;
    }
    
    void test_stress_high_concurrency() {
        std::cout << "Testing high concurrency stress..." << std::endl;
        
        std::string cmd = executable_path + " --type=lockfree --producers=8 --consumers=8";
        std::string output = exec_command(cmd);
        
        assert(output.find("Running lockfree with P=8 C=8") != std::string::npos);
        assert(output.find("Finished in") != std::string::npos);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–∑—É–º–Ω–æ–µ (–º–µ–Ω—å—à–µ 10 —Å–µ–∫—É–Ω–¥)
        std::regex time_regex(R"(Finished in (\d+(?:\.\d+)?)\s+sec)");
        std::smatch match;
        
        if (std::regex_search(output, match, time_regex)) {
            double seconds = std::stod(match[1].str());
            std::cout << "Execution time: " << seconds << " seconds" << std::endl;
            assert(seconds < 10.0);
        }
        
        std::cout << "‚úì High concurrency stress test passed" << std::endl;
    }
    
    void test_mutex_vs_lockfree_performance() {
        std::cout << "Testing mutex vs lockfree performance comparison..." << std::endl;
        
        // –¢–µ—Å—Ç —Å mutex
        std::string cmd_mutex = executable_path + " --type=mutex --producers=4 --consumers=4";
        std::string output_mutex = exec_command(cmd_mutex);
        
        // –¢–µ—Å—Ç —Å lockfree
        std::string cmd_lockfree = executable_path + " --type=lockfree --producers=4 --consumers=4";
        std::string output_lockfree = exec_command(cmd_lockfree);
        
        std::regex perf_regex(R"((\d+(?:\.\d+)?(?:e\+?\d+)?)\s+items/sec)");
        std::smatch match_mutex, match_lockfree;
        
        if (std::regex_search(output_mutex, match_mutex, perf_regex) &&
            std::regex_search(output_lockfree, match_lockfree, perf_regex)) {
            
            double mutex_perf = std::stod(match_mutex[1].str());
            double lockfree_perf = std::stod(match_lockfree[1].str());
            
            std::cout << "Mutex performance: " << mutex_perf << " items/sec" << std::endl;
            std::cout << "Lockfree performance: " << lockfree_perf << " items/sec" << std::endl;
            
            // –û–±—ã—á–Ω–æ lockfree –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ, –Ω–æ –Ω–µ –≤—Å–µ–≥–¥–∞
            // –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ —Ä–∞–±–æ—Ç–∞—é—Ç —Å —Ä–∞–∑—É–º–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
            assert(mutex_perf > 1000.0);
            assert(lockfree_perf > 1000.0);
            
            std::cout << "‚úì Performance comparison test passed" << std::endl;
        } else {
            std::cerr << "‚ùå Could not parse performance from outputs" << std::endl;
            assert(false);
        }
    }
    
    void run_all_tests() {
        std::cout << "=== Running E2E Tests for BufferRunner ===" << std::endl;
        
        try {
            test_default_parameters();
            test_lockfree_type();
            test_multiple_producers_consumers();
            test_performance_reasonable();
            test_invalid_type();
            test_stress_high_concurrency();
            test_mutex_vs_lockfree_performance();
            
            std::cout << "\nüéâ All E2E tests passed!" << std::endl;
        } catch (const std::exception& e) {
            std::cerr << "‚ùå Test failed with exception: " << e.what() << std::endl;
            std::exit(1);
        }
    }
};

int main(int argc, char** argv) {
    if (argc != 2) {
        std::cerr << "Usage: " << argv[0] << " <path_to_BufferRunner_executable>" << std::endl;
        return 1;
    }
    
    std::string exe_path = argv[1];
    BufferRunnerE2ETests tests(exe_path);
    tests.run_all_tests();
    
    return 0;
} 