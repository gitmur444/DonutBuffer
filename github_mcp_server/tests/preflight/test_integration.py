"""
üßô‚Äç‚ôÇÔ∏è DonutBuffer AI Wizard - Integration Test

–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ GitHub –∏ cursor-agent.
"""

import subprocess
import requests
from src.core.base_wizard import BaseWizard
from src.core.env_manager import EnvManager

class IntegrationTest(BaseWizard):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, env_manager: EnvManager):
        self.env_manager = env_manager
        
    def test_integration(self) -> bool:
        """–®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        self.print_step(4, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ GitHub API –¥–æ—Å—Ç—É–ø
        return self.test_github_api()
    
    def test_github_api(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ GitHub API"""
        github_token = self.env_manager.get_env_var("GITHUB_TOKEN")
        if not github_token:
            self.print_error("GITHUB_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
            
        try:
            headers = {"Authorization": f"token {github_token}"}
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—â–∏–π –¥–æ—Å—Ç—É–ø –∫ GitHub API
            user_response = requests.get("https://api.github.com/user", headers=headers, timeout=10)
            if user_response.status_code == 200:
                user_data = user_response.json()
                self.print_success(f"GitHub API —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data.get('login', 'unknown')}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã–π GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
                repo_name = self.detect_github_repo()
                if repo_name:
                    repo_response = requests.get(f"https://api.github.com/repos/{repo_name}", headers=headers, timeout=10)
                    if repo_response.status_code == 200:
                        self.print_success(f"–î–æ—Å—Ç—É–ø –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é {repo_name} —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    else:
                        self.print_warning(f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π {repo_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π")
                else:
                    self.print_warning("Git remote –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ GitHub API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                self.print_error("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ GitHub API")
                return False
                
        except Exception as e:
            self.print_warning(f"GitHub API —Ç–µ—Å—Ç: {e}")
            
        return True
    
    def detect_github_repo(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–∑ git remote"""
        try:
            import subprocess
            result = subprocess.run(
                ["git", "remote", "get-url", "origin"],
                capture_output=True,
                text=True,
                timeout=5,
                cwd=self.env_manager.project_dir
            )
            if result.returncode == 0:
                remote_url = result.stdout.strip()
                
                # –ü–∞—Ä—Å–∏–º GitHub URL (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º https –∏ ssh)
                if "github.com" in remote_url:
                    if remote_url.startswith("git@github.com:"):
                        # SSH format: git@github.com:user/repo.git
                        repo_part = remote_url.split(":")[-1].replace(".git", "")
                        return repo_part
                    elif "github.com/" in remote_url:
                        # HTTPS format: https://github.com/user/repo.git
                        repo_part = remote_url.split("github.com/")[-1].replace(".git", "")
                        return repo_part
        except:
            pass
        return None
    
    # cursor-agent —Ç–µ—Å—Ç –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ ambient –ø—Ä–µ—Ñ–ª–∞–π—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ—Å–≤–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ e2e