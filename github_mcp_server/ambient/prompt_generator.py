"""
üí¨ Prompt Generator - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∞.
"""

import time
from typing import Dict, Any, List
import sys
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–∞–∫–µ—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))
from core import BaseWizard
from .event_system import Event, EventType

class PromptGenerator(BaseWizard):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–±—ã—Ç–∏–π"""
    
    def __init__(self):
        self.prompt_templates = self.load_templates()
        
    def load_templates(self) -> Dict[str, str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã –ø—Ä–æ–º–ø—Ç–æ–≤"""
        return {
            "test_failure": """üîç **–ê–ù–ê–õ–ò–ó –£–ü–ê–í–®–ò–• –¢–ï–°–¢–û–í DONUTBUFFER**

**–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:** {repo_name}
**Workflow:** {workflow_name} (Run #{run_number})
**–í—Ä–µ–º—è:** {timestamp}
**URL:** {html_url}

**–£–ø–∞–≤—à–∏–µ –∑–∞–¥–∞—á–∏:**
```
{logs}
```

**–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç:**
- **–ê–≤—Ç–æ—Ä:** {commit_author}
- **–°–æ–æ–±—â–µ–Ω–∏–µ:** {commit_message}
- **SHA:** {commit_sha}

**–ó–ê–î–ê–ß–ê:**
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–∏—á–∏–Ω—ã –ø–∞–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
2. –û–ø—Ä–µ–¥–µ–ª–∏ —Å–≤—è–∑—å —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ C++ –∫–æ–¥–µ
3. –ü—Ä–æ–≤–µ—Ä—å –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ring buffer
4. –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
5. –û—Ü–µ–Ω–∏ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ lockfree vs mutex —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏

**–§–û–ö–£–°:** DonutBuffer C++ ring buffer, –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å""",

            "build_failure": """üõ†Ô∏è **–ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö –°–ë–û–†–ö–ò DONUTBUFFER**

**Workflow:** {workflow_name} (Run #{run_number})
**–í—Ä–µ–º—è:** {timestamp}

**–û—à–∏–±–∫–∏ —Å–±–æ—Ä–∫–∏:**
```
{logs}
```

**–ó–ê–î–ê–ß–ê:**
1. –û–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–æ–∫ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
2. –ü—Ä–æ–≤–µ—Ä—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å C++20
3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
4. –ü—Ä–µ–¥–ª–æ–∂–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è CMake –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

**–§–û–ö–£–°:** C++20, CMake, –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å, template –º–µ—Ç–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ""",

            "pr_analysis": """üìã **–ê–ù–ê–õ–ò–ó –ù–û–í–û–ì–û PULL REQUEST**

**PR #{pr_number}:** {pr_title}
**–ê–≤—Ç–æ—Ä:** {author}
**URL:** {pr_url}

**–ó–ê–î–ê–ß–ê:**
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ DonutBuffer –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
2. –û—Ü–µ–Ω–∏ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ring buffer
3. –ü—Ä–æ–≤–µ—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º lockfree –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
4. –ü—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –∫–æ–¥–∞ review

**–§–û–ö–£–°:** –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, best practices C++""",

            "manual_analysis": """üéØ **–†–£–ß–ù–û–ô –ê–ù–ê–õ–ò–ó DONUTBUFFER**

**–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑:** {analysis_type}
**–î–∞–Ω–Ω—ã–µ:**
```
{data}
```

**–ó–ê–î–ê–ß–ê:** 
–ü—Ä–æ–≤–µ–¥–∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞:
- C++ ring buffer –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
- –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ  
- Lockfree vs mutex performance
- Memory ordering –∏ cache efficiency

**–ö–û–ù–¢–ï–ö–°–¢:** DonutBuffer - –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π ring buffer –ø—Ä–æ–µ–∫—Ç"""
        }
    
    def generate_prompt(self, event: Event) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏—è
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        """
        
        if event.type == EventType.GITHUB_TEST_FAILED:
            return self.generate_test_failure_prompt(event)
        elif event.type == EventType.GITHUB_BUILD_FAILED:
            return self.generate_build_failure_prompt(event)
        elif event.type == EventType.GITHUB_PR_CREATED:
            return self.generate_pr_analysis_prompt(event)
        elif event.type == EventType.MANUAL_TRIGGER:
            return self.generate_manual_analysis_prompt(event)
        elif event.type == EventType.GITHUB_ISSUE_TEST:
            return self.generate_test_issue_prompt(event)
        else:
            return self.generate_generic_prompt(event)
    
    def generate_test_failure_prompt(self, event: Event) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É–ø–∞–≤—à–∏—Ö —Ç–µ—Å—Ç–æ–≤"""
        data = event.data
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–∏—Ç–µ
        head_commit = data.get("head_commit", {})
        commit_author = head_commit.get("author", {}).get("name", "Unknown")
        commit_message = head_commit.get("message", "No message")
        commit_sha = head_commit.get("id", "Unknown")[:8]
        
        return self.prompt_templates["test_failure"].format(
            repo_name=self.extract_repo_name(data),
            workflow_name=data.get("workflow_name", "Unknown"),
            run_number=data.get("run_number", "?"),
            timestamp=self.format_timestamp(event.timestamp),
            html_url=data.get("html_url", "N/A"),
            logs=data.get("logs", "–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"),
            commit_author=commit_author,
            commit_message=commit_message,
            commit_sha=commit_sha
        )
    
    def generate_build_failure_prompt(self, event: Event) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫ —Å–±–æ—Ä–∫–∏"""
        data = event.data
        
        return self.prompt_templates["build_failure"].format(
            workflow_name=data.get("workflow_name", "Unknown"),
            run_number=data.get("run_number", "?"),
            timestamp=self.format_timestamp(event.timestamp),
            logs=data.get("logs", "–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        )
    
    def generate_pr_analysis_prompt(self, event: Event) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ PR"""
        data = event.data
        
        return self.prompt_templates["pr_analysis"].format(
            pr_number=data.get("pr_number", "?"),
            pr_title=data.get("pr_title", "No title"),
            author=data.get("author", "Unknown"),
            pr_url=data.get("pr_url", "N/A")
        )
    
    def generate_manual_analysis_prompt(self, event: Event) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        data = event.data
        
        return self.prompt_templates["manual_analysis"].format(
            analysis_type=data.get("type", "General analysis"),
            data=data.get("content", "No additional data")
        )
    
    def generate_generic_prompt(self, event: Event) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
        return f"""ü§ñ **–ê–ù–ê–õ–ò–ó –°–û–ë–´–¢–ò–Ø DONUTBUFFER**

**–¢–∏–ø —Å–æ–±—ã—Ç–∏—è:** {event.type.value}
**–ò—Å—Ç–æ—á–Ω–∏–∫:** {event.source}
**–í—Ä–µ–º—è:** {self.format_timestamp(event.timestamp)}

**–î–∞–Ω–Ω—ã–µ:**
```
{self.format_event_data(event.data)}
```

**–ó–ê–î–ê–ß–ê:** 
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞ DonutBuffer.
–§–æ–∫—É—Å –Ω–∞ C++ ring buffer, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏.
"""
    
    def extract_repo_name(self, data: Dict) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ URL
        html_url = data.get("html_url", "")
        if "github.com" in html_url:
            parts = html_url.split("/")
            if len(parts) >= 5:
                return f"{parts[-4]}/{parts[-3]}"
        
        return "DonutBuffer"
    
    def format_timestamp(self, timestamp: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É"""
        return time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(timestamp))
    
    def format_event_data(self, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        lines = []
        for key, value in data.items():
            if isinstance(value, dict):
                lines.append(f"{key}:")
                for subkey, subvalue in value.items():
                    lines.append(f"  {subkey}: {subvalue}")
            elif isinstance(value, list):
                lines.append(f"{key}: {len(value)} items")
            else:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                str_value = str(value)
                if len(str_value) > 200:
                    str_value = str_value[:200] + "..."
                lines.append(f"{key}: {str_value}")
        
        return "\n".join(lines)
    
    def create_custom_prompt(self, 
                           analysis_type: str, 
                           content: str, 
                           focus_areas: List[str] = None) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            analysis_type: –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞
            content: –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            focus_areas: –û–±–ª–∞—Å—Ç–∏ —Ñ–æ–∫—É—Å–∞
        """
        
        focus_text = ""
        if focus_areas:
            focus_text = f"\n**–û–±–ª–∞—Å—Ç–∏ —Ñ–æ–∫—É—Å–∞:** {', '.join(focus_areas)}"
        
        return f"""üéØ **–ö–ê–°–¢–û–ú–ù–´–ô –ê–ù–ê–õ–ò–ó DONUTBUFFER**

**–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞:** {analysis_type}
**–í—Ä–µ–º—è:** {time.strftime("%Y-%m-%d %H:%M:%S")}

**–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:**
```
{content}
```

**–ó–ê–î–ê–ß–ê:**
–ü—Ä–æ–≤–µ–¥–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —É—á–µ—Ç–æ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ DonutBuffer –ø—Ä–æ–µ–∫—Ç–∞.
–§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ C++ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, ring buffer –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ,
lockfree vs mutex —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è—Ö.{focus_text}

**–ö–û–ù–¢–ï–ö–°–¢:** DonutBuffer - –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π C++ ring buffer"""
        
        return template.format(**data)
    
    def generate_test_issue_prompt(self, event: Event) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
        issue_number = event.data.get('issue_number', '?')
        title = event.data.get('title', 'No title')
        
        return f"""üî¨ **E2E –¢–ï–°–¢ AMBIENT AGENT –°–ò–°–¢–ï–ú–´**

**GitHub Issue:** #{issue_number}
**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {title}
**–í—Ä–µ–º—è:** {self.format_timestamp(event.timestamp)}

‚úÖ **–¢–ï–°–¢ –£–°–ü–ï–®–ï–ù!**

Ambient Agent —Å–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:
- GitHub API –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ‚úÖ
- –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π ‚úÖ  
- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ‚úÖ
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ ‚úÖ

DonutBuffer AI –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üöÄ""" 