"""
ü§ñ Agent Injector - –ò–Ω–∂–µ–∫—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ cursor-agent

–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –≤ cursor-agent.
"""

import subprocess
import time
from pathlib import Path
from typing import Optional
import sys
import os

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–∞–∫–µ—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))
from core import BaseWizard

class AgentInjector(BaseWizard):
    """–ò–Ω–∂–µ–∫—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ cursor-agent"""
    
    def __init__(self):
        self.session_file = Path.home() / ".cursor" / "sessions" / "ambient.json"
        
    def inject_prompt(self, prompt: str, source: str = "ambient") -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç –≤ cursor-agent
        
        Args:
            prompt: –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–æ–º–ø—Ç–∞ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        self.print_info(f"ü§ñ [{source}] –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–æ–º–ø—Ç –≤ cursor-agent...")
        
        try:
            # –ú–µ—Ç–æ–¥ 1: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ CLI —Å –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π
            result = subprocess.run([
                "cursor-agent", "chat", 
                f"[–ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –æ—Ç {source}]\n\n{prompt}"
            ], 
            capture_output=True, 
            text=True, 
            timeout=30
            )
            
            if result.returncode == 0:
                self.print_success(f"–ü—Ä–æ–º–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ cursor-agent CLI")
                return True
            else:
                self.print_warning(f"CLI –æ—à–∏–±–∫–∞: {result.stderr}")
                return self.fallback_to_file_injection(prompt, source)
                
        except subprocess.TimeoutExpired:
            self.print_warning("Timeout –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ä–µ–∑ CLI")
            return self.fallback_to_file_injection(prompt, source)
        except Exception as e:
            self.print_warning(f"–û—à–∏–±–∫–∞ CLI: {e}")
            return self.fallback_to_file_injection(prompt, source)
    
    def fallback_to_file_injection(self, prompt: str, source: str) -> bool:
        """
        Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–º–ø—Ç –≤ —Ñ–∞–π–ª –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        """
        try:
            ambient_dir = Path.home() / ".cursor" / "ambient"
            ambient_dir.mkdir(parents=True, exist_ok=True)
            
            timestamp = int(time.time())
            prompt_file = ambient_dir / f"{source}_{timestamp}.md"
            
            with open(prompt_file, 'w', encoding='utf-8') as f:
                f.write(f"# –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –æ—Ç {source}\n\n")
                f.write(f"**–í—Ä–µ–º—è:** {time.strftime('%Y-%m-%d %H:%M:%S')}\n\n")
                f.write(f"**–ü—Ä–æ–º–ø—Ç:**\n\n{prompt}\n\n")
                f.write("---\n*–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –ø—Ä–æ–º–ø—Ç –≤ cursor-agent –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞*\n")
            
            self.print_warning(f"–ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {prompt_file}")
            self.print_info("üí° –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–ø—Ç –≤ cursor-agent")
            return True
            
        except Exception as e:
            self.print_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª: {e}")
            return False
    
    def inject_background_analysis(self, analysis_data: dict) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≤ cursor-agent
        
        Args:
            analysis_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—Ç–µ—Å—Ç—ã, –ª–æ–≥–∏, –∫–æ–º–º–∏—Ç—ã –∏ —Ç.–¥.)
        """
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        prompt_parts = [
            "üîç **–§–û–ù–û–í–´–ô –ê–ù–ê–õ–ò–ó DONUTBUFFER**",
            ""
        ]
        
        if "failed_tests" in analysis_data:
            prompt_parts.extend([
                "**–£–ø–∞–≤—à–∏–µ —Ç–µ—Å—Ç—ã:**",
                f"```",
                analysis_data["failed_tests"],
                f"```",
                ""
            ])
        
        if "logs" in analysis_data:
            prompt_parts.extend([
                "**–õ–æ–≥–∏ –æ—à–∏–±–æ–∫:**", 
                f"```",
                analysis_data["logs"][:1000] + "..." if len(analysis_data["logs"]) > 1000 else analysis_data["logs"],
                f"```",
                ""
            ])
            
        if "commits" in analysis_data:
            prompt_parts.extend([
                "**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã:**",
                analysis_data["commits"],
                ""
            ])
        
        prompt_parts.extend([
            "**–ó–∞–¥–∞—á–∞:** –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–±–ª–µ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—à–µ–Ω–∏—è.",
            "–§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ C++ ring buffer, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ lockfree vs mutex."
        ])
        
        prompt = "\n".join(prompt_parts)
        return self.inject_prompt(prompt, "github_monitor")
    
    def check_cursor_agent_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å cursor-agent"""
        try:
            result = subprocess.run(
                ["cursor-agent", "--help"], 
                capture_output=True, 
                timeout=5
            )
            return result.returncode == 0
        except:
            return False 