"""
üîç GitHub Monitor - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ GitHub

–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–∞–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤, –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏ –¥—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è.
"""

import requests
import time
import threading
from typing import Dict, List, Optional, Set
import sys
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–∞–∫–µ—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))
from core import BaseWizard
from env_manager import EnvManager
from .event_system import EventSystem, EventType

class GitHubMonitor(BaseWizard):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    
    def __init__(self, event_system: EventSystem, env_manager: EnvManager):
        self.event_system = event_system
        self.env_manager = env_manager
        self.github_token = env_manager.get_env_var("GITHUB_TOKEN")
        self.repo_name = self.detect_repo_name()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.monitoring = False
        self.monitor_thread: Optional[threading.Thread] = None
        self.last_check_time = time.time()
        self.known_failures: Set[str] = set()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.check_interval = 60  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        
    def detect_repo_name(self) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–º—è GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        try:
            import subprocess
            result = subprocess.run(
                ["git", "remote", "get-url", "origin"],
                capture_output=True,
                text=True,
                timeout=5
            )
            if result.returncode == 0:
                remote_url = result.stdout.strip()
                
                if "github.com" in remote_url:
                    if remote_url.startswith("git@github.com:"):
                        # SSH format: git@github.com:user/repo.git
                        repo_part = remote_url.split(":")[-1].replace(".git", "")
                        return repo_part
                    elif "github.com/" in remote_url:
                        # HTTPS format: https://github.com/user/repo.git
                        repo_part = remote_url.split("github.com/")[-1].replace(".git", "")
                        return repo_part
        except:
            pass
        return None
    
    def start_monitoring(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ GitHub"""
        if not self.github_token:
            self.print_error("GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        if not self.repo_name:
            self.print_warning("–ò–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
        
        if self.monitoring:
            self.print_warning("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return True
            
        self.monitoring = True
        self.monitor_thread = threading.Thread(
            target=self.monitoring_loop,
            daemon=True
        )
        self.monitor_thread.start()
        
        self.print_success(f"üîç GitHub –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω (repo: {self.repo_name or 'unknown'})")
        return True
    
    def stop_monitoring(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.monitoring = False
        if self.monitor_thread:
            self.monitor_thread.join(timeout=10)
        self.print_info("üîç GitHub –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def monitoring_loop(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.monitoring:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º workflow runs (GitHub Actions)
                self.check_workflow_runs()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º pull requests
                self.check_pull_requests()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                self.last_check_time = time.time()
                
                # –û–∂–∏–¥–∞–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                time.sleep(self.check_interval)
                
            except Exception as e:
                self.print_error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(30)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def check_workflow_runs(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç workflow runs –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–∞–¥–µ–Ω–∏–π"""
        if not self.repo_name:
            return
            
        try:
            headers = {"Authorization": f"token {self.github_token}"}
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ workflow runs
            url = f"https://api.github.com/repos/{self.repo_name}/actions/runs"
            params = {
                "per_page": 10,
                "status": "completed"
            }
            
            response = requests.get(url, headers=headers, params=params, timeout=10)
            if response.status_code != 200:
                self.print_warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è workflow runs: {response.status_code}")
                return
                
            data = response.json()
            
            for run in data.get("workflow_runs", []):
                run_id = str(run["id"])
                conclusion = run.get("conclusion")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ—É–¥–∞—á–Ω—ã–µ runs
                if conclusion == "failure" and run_id not in self.known_failures:
                    self.known_failures.add(run_id)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ–± –æ—à–∏–±–∫–µ
                    self.handle_workflow_failure(run)
                    
        except Exception as e:
            self.print_warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ workflow runs: {e}")
    
    def handle_workflow_failure(self, run: Dict) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–ø–∞–≤—à–∏–π workflow run"""
        self.print_warning(f"üö® –£–ø–∞–ª workflow: {run['name']} (#{run['run_number']})")
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏
        logs = self.get_workflow_logs(run["id"])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        event_data = {
            "run_id": run["id"],
            "run_name": run["name"],
            "run_number": run["run_number"], 
            "workflow_name": run["name"],
            "conclusion": run["conclusion"],
            "html_url": run["html_url"],
            "head_commit": run.get("head_commit", {}),
            "logs": logs[:2000] if logs else "–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        self.event_system.emit_simple(
            event_type=EventType.GITHUB_TEST_FAILED,
            data=event_data,
            source="github_monitor",
            priority=4  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        )
    
    def get_workflow_logs(self, run_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–∏ workflow run"""
        try:
            headers = {"Authorization": f"token {self.github_token}"}
            
            # –ü–æ–ª—É—á–∞–µ–º jobs –¥–ª—è run
            jobs_url = f"https://api.github.com/repos/{self.repo_name}/actions/runs/{run_id}/jobs"
            jobs_response = requests.get(jobs_url, headers=headers, timeout=10)
            
            if jobs_response.status_code != 200:
                return None
                
            jobs_data = jobs_response.json()
            logs = []
            
            for job in jobs_data.get("jobs", []):
                if job.get("conclusion") == "failure":
                    logs.append(f"‚ùå Job: {job['name']}")
                    
                    for step in job.get("steps", []):
                        if step.get("conclusion") == "failure":
                            logs.append(f"  ‚ùå Step: {step['name']}")
                            
            return "\n".join(logs) if logs else None
            
        except Exception as e:
            self.print_warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            return None
    
    def check_pull_requests(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ pull requests"""
        if not self.repo_name:
            return
            
        try:
            headers = {"Authorization": f"token {self.github_token}"}
            
            url = f"https://api.github.com/repos/{self.repo_name}/pulls"
            params = {
                "state": "open",
                "sort": "created",
                "direction": "desc",
                "per_page": 5
            }
            
            response = requests.get(url, headers=headers, params=params, timeout=10)
            if response.status_code != 200:
                return
                
            data = response.json()
            
            for pr in data:
                pr_created = pr["created_at"]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ PR
                # (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
                if self.is_recent_pr(pr_created):
                    event_data = {
                        "pr_number": pr["number"],
                        "pr_title": pr["title"],
                        "pr_url": pr["html_url"],
                        "author": pr["user"]["login"],
                        "created_at": pr_created
                    }
                    
                    self.event_system.emit_simple(
                        event_type=EventType.GITHUB_PR_CREATED,
                        data=event_data,
                        source="github_monitor",
                        priority=2
                    )
                    
        except Exception as e:
            self.print_warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PR: {e}")
    
    def is_recent_pr(self, created_at: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ PR –Ω–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–º"""
        try:
            from datetime import datetime, timezone
            
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è PR
            pr_time = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
            now = datetime.now(timezone.utc)
            
            # –°—á–∏—Ç–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–º–∏ PR —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞
            diff = (now - pr_time).total_seconds()
            return diff < 7200  # 2 —á–∞—Å–∞
            
        except:
            return False
    
    def manual_check(self) -> Dict:
        """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        result = {
            "repo_name": self.repo_name,
            "monitoring_active": self.monitoring,
            "last_check": self.last_check_time,
            "known_failures": len(self.known_failures)
        }
        
        self.print_info(f"üìä –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {result}")
        return result
    
    def get_headers(self) -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è GitHub API"""
        return {
            "Authorization": f"token {self.github_token}",
            "Accept": "application/vnd.github.v3+json",
            "User-Agent": "DonutBuffer-Ambient-Agent"
        }
    
    def create_test_issue(self) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π issue –¥–ª—è E2E –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        import time
        
        if not self.repo_name:
            raise Exception("Repo name not detected")
        
        url = f"https://api.github.com/repos/{self.repo_name}/issues"
        timestamp = int(time.time())
        
        data = {
            "title": f"[AMBIENT-TEST] System check {timestamp}",
            "body": "Auto-generated test issue for ambient agent E2E testing",
            "labels": ["ambient-test", "auto-generated"]
        }
        
        response = requests.post(url, json=data, headers=self.get_headers())
        if not response.ok:
            raise Exception(f"Failed to create test issue: {response.status_code}")
        
        return response.json()
    
    def delete_test_issue(self, issue_number: int) -> None:
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π issue"""
        if not self.repo_name:
            raise Exception("Repo name not detected")
        
        # 1. –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞
        comment_url = f"https://api.github.com/repos/{self.repo_name}/issues/{issue_number}/comments"
        comment_data = {
            "body": "‚úÖ E2E test completed successfully. Closing automatically."
        }
        
        response = requests.post(comment_url, json=comment_data, headers=self.get_headers())
        if not response.ok:
            raise Exception(f"Failed to add cleanup comment: {response.status_code}")
        
        # 2. –ó–∞–∫—Ä—ã–≤–∞–µ–º issue
        issue_url = f"https://api.github.com/repos/{self.repo_name}/issues/{issue_number}"
        close_data = {
            "state": "closed"
        }
        
        response = requests.patch(issue_url, json=close_data, headers=self.get_headers())
        if not response.ok:
            raise Exception(f"Failed to close issue: {response.status_code}")
    
    def check_for_test_issues(self, specific_issue_number: int = None) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö issues –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è"""
        if not self.repo_name:
            return
        
        if specific_issue_number:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π issue
            url = f"https://api.github.com/repos/{self.repo_name}/issues/{specific_issue_number}"
            
            try:
                response = requests.get(url, headers=self.get_headers())
                if not response.ok:
                    return
                
                issue = response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π issue (–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç - —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π)
                if "[AMBIENT-TEST]" in issue["title"] and issue["state"] == "open" and "ambient-test" in [label["name"] for label in issue.get("labels", [])]:
                    self.event_system.emit_simple(
                        event_type=EventType.GITHUB_ISSUE_TEST,
                        source="github_monitor",
                        data={
                            "issue_number": issue["number"],
                            "title": issue["title"],
                            "created_at": issue["created_at"]
                        }
                    )
                    
            except Exception as e:
                self.print_warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ issue #{specific_issue_number}: {e}")
        else:
            # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ - –∏—â–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ issues (–¥–ª—è –æ–±—â–µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
            url = f"https://api.github.com/repos/{self.repo_name}/issues"
            params = {
                "labels": "ambient-test",
                "state": "all",
                "per_page": 10
            }
            
            try:
                response = requests.get(url, params=params, headers=self.get_headers())
                if not response.ok:
                    return
                
                issues = response.json()
                
                for issue in issues:
                    if "[AMBIENT-TEST]" in issue["title"]:
                        self.event_system.emit_simple(
                            event_type=EventType.GITHUB_ISSUE_TEST,
                            source="github_monitor",
                            data={
                                "issue_number": issue["number"],
                                "title": issue["title"],
                                "created_at": issue["created_at"]
                            }
                        )
                        
            except Exception as e:
                self.print_warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö issues: {e}")
    
    def force_check(self, specific_issue_number: int = None) -> None:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ GitHub –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞"""
        self.check_for_test_issues(specific_issue_number) 