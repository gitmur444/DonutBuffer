"""
üéØ Event Handlers - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è Ambient Agent

–í—ã–Ω–µ—Å–µ–Ω—ã –∏–∑ ambient_agent.py –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞.
"""

import sys
from pathlib import Path
from typing import TYPE_CHECKING

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–∞–∫–µ—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))
from core import BaseWizard
from .event_system import Event, EventType

# –ò–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
if TYPE_CHECKING:
    from .prompt_generator import PromptGenerator
    from .agent_injector import AgentInjector

class EventHandlers(BaseWizard):
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
    
    def __init__(self, prompt_generator: "PromptGenerator", agent_injector: "AgentInjector"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        
        Args:
            prompt_generator: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤
            agent_injector: –ò–Ω–∂–µ–∫—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ cursor-agent
        """
        super().__init__()
        self.prompt_generator = prompt_generator
        self.agent_injector = agent_injector
        self.test_event_processed = False  # –§–ª–∞–≥ –¥–ª—è E2E —Ç–µ—Å—Ç–∞
    
    def handle_test_failure(self, event: Event) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤"""
        workflow_name = event.data.get('workflow_name', 'Unknown')
        run_number = event.data.get('run_number', '?')
        
        self.print_warning(f"üö® –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–∞–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤: {workflow_name} (#{run_number})")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        prompt = self.prompt_generator.generate_prompt(event)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ cursor-agent
        success = self.agent_injector.inject_prompt(prompt, "test_failure")
        
        if success:
            self.print_success("‚úÖ –ê–Ω–∞–ª–∏–∑ —É–ø–∞–≤—à–∏—Ö —Ç–µ—Å—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ cursor-agent")
            self.print_info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ cursor-agent –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º")
        else:
            self.print_error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤ cursor-agent")
    
    def handle_build_failure(self, event: Event) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ —Å–±–æ—Ä–∫–∏"""
        workflow_name = event.data.get('workflow_name', 'Unknown')
        
        self.print_warning(f"üõ†Ô∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—à–∏–±–∫—É —Å–±–æ—Ä–∫–∏: {workflow_name}")
        
        prompt = self.prompt_generator.generate_prompt(event)
        success = self.agent_injector.inject_prompt(prompt, "build_failure")
        
        if success:
            self.print_success("‚úÖ –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ —Å–±–æ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ cursor-agent")
            self.print_info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ cursor-agent –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏")
    
    def handle_pr_created(self, event: Event) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö PR"""
        pr_number = event.data.get('pr_number', '?')
        pr_title = event.data.get('pr_title', 'No title')
        author = event.data.get('author', 'Unknown')
        
        self.print_info(f"üìã –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–æ–≤—ã–π PR #{pr_number}: {pr_title[:50]}...")
        self.print_info(f"üë§ –ê–≤—Ç–æ—Ä: {author}")
        
        prompt = self.prompt_generator.generate_prompt(event)
        success = self.agent_injector.inject_prompt(prompt, "pr_analysis")
        
        if success:
            self.print_success("‚úÖ –ê–Ω–∞–ª–∏–∑ PR –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ cursor-agent")
            self.print_info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ cursor-agent –¥–ª—è code review —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    
    def handle_manual_trigger(self, event: Event) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã"""
        analysis_type = event.data.get('type', 'manual')
        content = event.data.get('content', 'No content')
        
        self.print_info(f"üéØ –í—ã–ø–æ–ª–Ω—è—é —Ä—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑: {analysis_type}")
        self.print_info(f"üìù –ö–æ–Ω—Ç–µ–Ω—Ç: {content[:100]}...")
        
        prompt = self.prompt_generator.generate_prompt(event)
        success = self.agent_injector.inject_prompt(prompt, "manual_analysis")
        
        if success:
            self.print_success("‚úÖ –†—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ cursor-agent")
            self.print_info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ cursor-agent –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞")
    
    def handle_system_test(self, event: Event) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–µ—Å—Ç"""
        test_id = event.data.get('test_id', 'unknown')
        description = event.data.get('description', 'No description')
        
        self.print_success(f"üß™ –°–∏—Å—Ç–µ–º–Ω—ã–π —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {test_id}")
        self.print_info(f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
        
        # –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        if hasattr(self, 'test_results'):
            self.test_results[test_id] = True
    
    def handle_test_issue(self, event: Event) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç E2E —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ GitHub Issues"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        self.test_event_processed = True 