"""
üßô‚Äç‚ôÇÔ∏è DonutBuffer AI Wizard - GitHub Setup

–ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub —Ç–æ–∫–µ–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ API.
"""

import getpass
import requests
from core import BaseWizard, Colors
from env_manager import EnvManager

class GitHubSetup(BaseWizard):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, env_manager: EnvManager):
        self.env_manager = env_manager
        
    def setup_github_token(self) -> bool:
        """–®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub —Ç–æ–∫–µ–Ω–∞"""
        self.print_step(2, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub —Ç–æ–∫–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω (–∏–∑ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
        github_token = self.env_manager.get_env_var("GITHUB_TOKEN")
        if github_token:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
            if self.validate_token(github_token):
                # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ .env —Ñ–∞–π–ª–µ
                if not self.env_manager.env_file.exists() or f'GITHUB_TOKEN="{github_token}"' not in self.env_manager.env_file.read_text():
                    self.env_manager.save_env_file("GITHUB_TOKEN", github_token)
                    self.print_success("–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ .env —Ñ–∞–π–ª")
                return True
            else:
                self.print_warning("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π GitHub —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        return self.request_new_token()
    
    def validate_token(self, token: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ GitHub —Ç–æ–∫–µ–Ω–∞"""
        try:
            headers = {"Authorization": f"token {token}"}
            response = requests.get("https://api.github.com/user", headers=headers, timeout=10)
            if response.status_code == 200:
                user_data = response.json()
                self.print_success(f"GitHub —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data.get('login', 'unknown')}")
                return True
            else:
                return False
        except Exception as e:
            self.print_warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return False
    
    def request_new_token(self) -> bool:
        """–ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ GitHub —Ç–æ–∫–µ–Ω–∞"""
        print(f"\n{Colors.YELLOW}üìã –°–æ–∑–¥–∞–π—Ç–µ GitHub Personal Access Token:{Colors.NC}")
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ: https://github.com/settings/tokens")
        print("2. –ù–∞–∂–º–∏—Ç–µ 'Generate new token' ‚Üí 'Generate new token (classic)'")
        print("3. –í—ã–±–µ—Ä–∏—Ç–µ scopes: repo, workflow, read:org")
        print("4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω\n")
        
        token = getpass.getpass("üîë –í–≤–µ–¥–∏—Ç–µ GitHub —Ç–æ–∫–µ–Ω: ").strip()
        if not token:
            self.print_error("–¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        try:
            headers = {"Authorization": f"token {token}"}
            response = requests.get("https://api.github.com/user", headers=headers, timeout=10)
            if response.status_code == 200:
                user_data = response.json()
                self.print_success(f"–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data.get('login', 'unknown')}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
                import os
                os.environ["GITHUB_TOKEN"] = token
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ .env —Ñ–∞–π–ª –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                self.env_manager.save_env_file("GITHUB_TOKEN", token)
                self.print_success(f"–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {self.env_manager.env_file.name}")
                self.print_warning("‚ö†Ô∏è  –§–∞–π–ª .env –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ .gitignore –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
                
                return True
            else:
                self.print_error("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π GitHub —Ç–æ–∫–µ–Ω")
                return False
        except Exception as e:
            self.print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return False 