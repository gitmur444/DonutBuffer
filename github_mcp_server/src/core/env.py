"""
üßô‚Äç‚ôÇÔ∏è DonutBuffer AI Wizard - Environment Manager

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ .env —Ñ–∞–π–ª–∞–º–∏.
"""

import os
from pathlib import Path
from .base import BaseWizard

class EnvManager(BaseWizard):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å .env —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    def __init__(self, project_dir: Path):
        self.project_dir = project_dir
        self.env_file = project_dir / ".env"
        
    def load_env_file(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞"""
        if self.env_file.exists():
            with open(self.env_file, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                        value = value.strip('"\'')
                        os.environ[key] = value

    def save_env_file(self, key: str, value: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ .env —Ñ–∞–π–ª"""
        env_content = []
        key_updated = False
        
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.env_file.exists():
            with open(self.env_file, 'r') as f:
                for line in f:
                    line_strip = line.strip()
                    if line_strip.startswith(f"{key}="):
                        env_content.append(f"{key}=\"{value}\"\n")
                        key_updated = True
                    else:
                        env_content.append(line)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏
        if not key_updated:
            env_content.append(f"{key}=\"{value}\"\n")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
        with open(self.env_file, 'w') as f:
            f.writelines(env_content)
        
        self.ensure_gitignore()

    def ensure_gitignore(self) -> None:
        """–£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ .env —Ñ–∞–π–ª –≤ .gitignore"""
        gitignore_file = self.project_dir / ".gitignore"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ .env –≤ .gitignore
        gitignore_content = ""
        if gitignore_file.exists():
            with open(gitignore_file, 'r') as f:
                gitignore_content = f.read()
        
        if ".env" not in gitignore_content:
            # –î–æ–±–∞–≤–ª—è–µ–º .env –≤ .gitignore
            with open(gitignore_file, 'a') as f:
                if gitignore_content and not gitignore_content.endswith('\n'):
                    f.write('\n')
                f.write('# Environment variables\n.env\n')

    def get_env_var(self, key: str, default: str = None) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        return os.getenv(key, default) 