"""
ü§ñ Agent Injector - –ò–Ω–∂–µ–∫—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ cursor-agent

–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –≤ cursor-agent.
"""

import subprocess
import time
from pathlib import Path
from typing import Optional, Any
import sys
import os
import json

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–∞–∫–µ—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))
from ..core.base_wizard import BaseWizard

class AgentInjector(BaseWizard):
    """–ò–Ω–∂–µ–∫—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ cursor-agent"""
    
    def __init__(self):
        self.session_file = Path.home() / ".cursor" / "sessions" / "ambient.json"
        
    def inject_prompt(self, prompt: str, source: str = "ambient") -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç –≤ –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é cursor-agent (–∫–∞–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        
        Args:
            prompt: –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–æ–º–ø—Ç–∞ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        self.print_info(f"ü§ñ [{source}] –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ cursor-agent...")
        
        try:
            # –ü–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º JSON, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–º–∫–µ
            return self._run_streaming(prompt)
        except subprocess.TimeoutExpired:
            self.print_warning("Timeout –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ä–µ–∑ CLI")
            return self.try_resume_method(prompt, source)
        except Exception as e:
            self.print_warning(f"–û—à–∏–±–∫–∞ CLI: {e}")
            return self.try_resume_method(prompt, source)

    def _run_streaming(self, prompt: str) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç cursor-agent —Å --print --output-format stream-json –∏ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç –≤—ã–≤–æ–¥.

        - –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (role=user) –ø–µ—á–∞—Ç–∞—é—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –≤ —Ä–∞–º–∫–µ
        - –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∏–º–∏—Ç—Å—è —Ç–æ–∫–µ–Ω–∞–º–∏ –±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏, —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º flush
        - –ò—Ç–æ–≥ (type=result) –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å—Ç—Ä–æ–∫—É
        """
        try:
            with subprocess.Popen(
                ["cursor-agent", prompt, "--print", "--output-format", "stream-json"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                bufsize=1
            ) as proc:
                assert proc.stdout is not None
                printed_user = False
                for line in proc.stdout:
                    line = line.strip()
                    if not line:
                        continue
                    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON-—Å–æ–±—ã—Ç–∏–µ
                    obj: Any = None
                    try:
                        obj = json.loads(line)
                    except Exception:
                        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—á–∞—Ç–∞–µ–º
                        print(line)
                        continue
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–¥–∏–Ω —Ä–∞–∑)
                    if not printed_user and self._is_user_event(obj):
                        content = self._extract_text(obj)
                        if content:
                            print(self._box(content))
                            printed_user = True
                        continue
                    # –ü–æ—Ç–æ–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ‚Äî –ø–µ—á–∞—Ç–∞–µ–º –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏
                    if self._is_assistant_event(obj):
                        chunk = self._extract_text(obj)
                        if chunk:
                            print(chunk, end="", flush=True)
                        continue
                    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
                    if obj.get("type") == "result":
                        print("")
                        continue
                    # –û—Å—Ç–∞–ª—å–Ω–æ–µ: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –ø–µ—á–∞—Ç–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
                    text = self._extract_text(obj)
                    if text:
                        print(text)
                return proc.wait() == 0
        except Exception as e:
            self.print_warning(f"stream-json –æ—à–∏–±–∫–∞: {e}")
            return False

    def stream_with_callbacks(
        self,
        prompt: str,
        on_user: Optional[callable] = None,
        on_chunk: Optional[callable] = None,
        on_result: Optional[callable] = None,
    ) -> bool:
        """–°—Ç—Ä–∏–º–∏—Ç –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞, –≤—ã–∑—ã–≤–∞—è –∫–æ–ª–±—ç–∫–∏ –¥–ª—è UI.

        - on_user(text): –æ–¥–∏–Ω —Ä–∞–∑, –∫–æ–≥–¥–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        - on_chunk(text): —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ –º–µ—Ä–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
        - on_result(full_or_final_line): —Ñ–∏–Ω–∞–ª –∑–∞–ø—Ä–æ—Å–∞
        """
        try:
            with subprocess.Popen(
                ["cursor-agent", prompt, "--print", "--output-format", "stream-json"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                bufsize=1
            ) as proc:
                assert proc.stdout is not None
                printed_user = False
                for line in proc.stdout:
                    line = line.strip()
                    if not line:
                        continue
                    obj: Any = None
                    try:
                        obj = json.loads(line)
                    except Exception:
                        continue
                    if not printed_user and self._is_user_event(obj):
                        content = self._extract_text(obj)
                        if content and on_user:
                            on_user(content)
                        printed_user = True
                        continue
                    if self._is_assistant_event(obj):
                        chunk = self._extract_text(obj)
                        if chunk and on_chunk:
                            on_chunk(chunk)
                        continue
                    if isinstance(obj, dict) and obj.get("type") == "result":
                        if on_result:
                            on_result(obj.get("result") or "")
                        continue
                return proc.wait() == 0
        except Exception as e:
            self.print_warning(f"stream-json –æ—à–∏–±–∫–∞: {e}")
            return False

    def _try_print_user_message_box(self, obj: Any) -> bool:
        """–ü—Ä–æ–±—É–µ—Ç –Ω–∞–π—Ç–∏ {role:user, content:...} –∏ –≤—ã–≤–µ—Å—Ç–∏ —Ä–∞–º–∫—É. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –Ω–∞–ø–µ—á–∞—Ç–∞–ª–∏."""
        # –ü—Ä—è–º–æ–π —Ñ–æ—Ä–º–∞—Ç
        if isinstance(obj, dict):
            if obj.get("role") == "user":
                content = self._extract_text(obj)
                if content:
                    print(self._box(content))
                    return True
            # –ü–æ–∏—Å–∫ –≥–ª—É–±–∂–µ
            for v in obj.values():
                if self._try_print_user_message_box(v):
                    return True
        elif isinstance(obj, list):
            for it in obj:
                if self._try_print_user_message_box(it):
                    return True
        return False

    def _extract_text(self, obj: Any) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –æ–±—ä–µ–∫—Ç–∞ —Å–æ–±—ã—Ç–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ."""
        if isinstance(obj, dict):
            # cursor-agent stream-json: message.content: [{type:'text', text:'...'}]
            if isinstance(obj.get("message"), dict):
                return self._extract_text(obj["message"])
            if isinstance(obj.get("content"), str):
                return obj.get("content")
            if isinstance(obj.get("content"), list):
                parts = []
                for it in obj.get("content"):
                    t = self._extract_text(it)
                    if t:
                        parts.append(t)
                return "".join(parts)
            # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–ª–∞–¥—É—Ç —Ç–µ–∫—Å—Ç –≤ data.text –∏–ª–∏ message.content
            for key in ("text", "message", "data"):
                v = obj.get(key)
                t = self._extract_text(v)
                if t:
                    return t
        elif isinstance(obj, list):
            parts = [self._extract_text(it) for it in obj]
            parts = [p for p in parts if p]
            return "\n".join(parts)
        elif isinstance(obj, str):
            return obj
        return ""

    def _is_user_event(self, obj: Any) -> bool:
        if isinstance(obj, dict):
            if obj.get("type") == "user":
                return True
            msg = obj.get("message")
            if isinstance(msg, dict) and msg.get("role") == "user":
                return True
        return False

    def _is_assistant_event(self, obj: Any) -> bool:
        if isinstance(obj, dict):
            if obj.get("type") == "assistant":
                return True
            msg = obj.get("message")
            if isinstance(msg, dict) and msg.get("role") == "assistant":
                return True
        return False

    def _box(self, text: str) -> str:
        """–ü—Ä–æ—Å—Ç–∞—è —Ä–∞–º–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        lines = text.splitlines() or [""]
        width = max(len(l) for l in lines)
        top = "‚îå" + "‚îÄ" * (width + 2) + "‚îê"
        mid = ["‚îÇ " + l.ljust(width) + " ‚îÇ" for l in lines]
        bot = "‚îî" + "‚îÄ" * (width + 2) + "‚îò"
        return "\n".join([top, *mid, bot])
    
    def try_resume_method(self, prompt: str, source: str) -> bool:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—É–¥–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π
            result = subprocess.run([
                "cursor-agent", "ls"
            ], capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0 and result.stdout.strip():
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Å—Å–∏–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é
                self.print_info("üîÑ –ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Å—Å–∏—é...")
                result = subprocess.run([
                    "cursor-agent", "resume", 
                    prompt
                ], capture_output=True, text=True, timeout=30)
                
                if result.returncode == 0:
                    self.print_success("‚úÖ –ü—Ä–æ–º–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ resume")
                    return True
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å - fallback
            return self.fallback_to_file_injection(prompt, source)
            
        except Exception as e:
            self.print_warning(f"–û—à–∏–±–∫–∞ resume: {e}")
            return self.fallback_to_file_injection(prompt, source)
    
    def fallback_to_file_injection(self, prompt: str, source: str) -> bool:
        """
        Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–º–ø—Ç –≤ —Ñ–∞–π–ª –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        """
        try:
            ambient_dir = Path.home() / ".cursor" / "ambient"
            ambient_dir.mkdir(parents=True, exist_ok=True)
            
            timestamp = int(time.time())
            prompt_file = ambient_dir / f"{source}_{timestamp}.md"
            
            with open(prompt_file, 'w', encoding='utf-8') as f:
                f.write(f"# ü§ñ Ambient Agent Notification\n\n")
                f.write(f"**Time:** {time.strftime('%Y-%m-%d %H:%M:%S')}\n\n")
                f.write(f"{prompt}\n\n")
                f.write("---\n*Copy this message and paste into cursor-agent*\n")
            
            self.print_warning(f"üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {prompt_file}")
            self.print_info("üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ cursor-agent")
            return True
            
        except Exception as e:
            self.print_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª: {e}")
            return False
    
    def inject_background_analysis(self, analysis_data: dict) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≤ cursor-agent
        
        Args:
            analysis_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—Ç–µ—Å—Ç—ã, –ª–æ–≥–∏, –∫–æ–º–º–∏—Ç—ã –∏ —Ç.–¥.)
        """
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        prompt_parts = [
            "üîç **–§–û–ù–û–í–´–ô –ê–ù–ê–õ–ò–ó DONUTBUFFER**",
            ""
        ]
        
        if "failed_tests" in analysis_data:
            prompt_parts.extend([
                "**–£–ø–∞–≤—à–∏–µ —Ç–µ—Å—Ç—ã:**",
                f"```",
                analysis_data["failed_tests"],
                f"```",
                ""
            ])
        
        if "logs" in analysis_data:
            prompt_parts.extend([
                "**–õ–æ–≥–∏ –æ—à–∏–±–æ–∫:**", 
                f"```",
                analysis_data["logs"][:1000] + "..." if len(analysis_data["logs"]) > 1000 else analysis_data["logs"],
                f"```",
                ""
            ])
            
        if "commits" in analysis_data:
            prompt_parts.extend([
                "**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã:**",
                analysis_data["commits"],
                ""
            ])
        
        prompt_parts.extend([
            "**–ó–∞–¥–∞—á–∞:** –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–±–ª–µ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—à–µ–Ω–∏—è.",
            "–§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ C++ ring buffer, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ lockfree vs mutex."
        ])
        
        prompt = "\n".join(prompt_parts)
        return self.inject_prompt(prompt, "github_monitor")
    
    def check_cursor_agent_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å cursor-agent"""
        try:
            result = subprocess.run(
                ["cursor-agent", "--help"], 
                capture_output=True, 
                timeout=5
            )
            return result.returncode == 0
        except:
            return False 