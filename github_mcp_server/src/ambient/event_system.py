"""
üì° Event System - –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è Ambient Agent

–ü—Ä–æ—Å—Ç–∞—è event-driven —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤.
"""

import asyncio
import time
from dataclasses import dataclass
from typing import Dict, List, Callable, Any, Optional
from enum import Enum
import threading
import sys
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–∞–∫–µ—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))
from ..core.base import BaseWizard

class EventType(Enum):
    """–¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ"""
    GITHUB_WORKFLOW_EVENT = "github_workflow_event"  # –õ—é–±—ã–µ —Å–æ–±—ã—Ç–∏—è —Å workflows
    GITHUB_PR_CREATED = "github_pr_created"
    SYSTEM_ERROR = "system_error"
    MANUAL_TRIGGER = "manual_trigger"
    SYSTEM_TEST = "system_test"  # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–æ–±—ã—Ç–∏–π
    GITHUB_ISSUE_TEST = "github_issue_test"  # E2E —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ GitHub Issues

@dataclass
class Event:
    """–°–æ–±—ã—Ç–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ"""
    type: EventType
    data: Dict[str, Any]
    timestamp: float
    source: str
    priority: int = 1  # 1=–Ω–∏–∑–∫–∏–π, 5=–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π
    
    def __post_init__(self):
        if not self.timestamp:
            self.timestamp = time.time()

class EventSystem(BaseWizard):
    """–°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏"""
    
    def __init__(self):
        self.handlers: Dict[EventType, List[Callable]] = {}
        self.event_queue: List[Event] = []
        self.running = False
        self.processing_thread: Optional[threading.Thread] = None
        
    def register_handler(self, event_type: EventType, handler: Callable) -> None:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        
        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            handler: –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        """
        if event_type not in self.handlers:
            self.handlers[event_type] = []
        
        self.handlers[event_type].append(handler)
    
    def emit(self, event: Event) -> None:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        self.event_queue.append(event)
        self.event_queue.sort(key=lambda e: (-e.priority, e.timestamp))
    
    def emit_simple(self, 
                   event_type: EventType, 
                   data: Dict[str, Any], 
                   source: str = "unknown",
                   priority: int = 1) -> None:
        """
        –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è
        """
        event = Event(
            type=event_type,
            data=data,
            timestamp=time.time(),
            source=source,
            priority=priority
        )
        self.emit(event)
    
    def start_processing(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.running:
            return
            
        self.running = True
        self.processing_thread = threading.Thread(
            target=self.process_events_loop, 
            daemon=True
        )
        self.processing_thread.start()
    
    def stop_processing(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π"""
        self.running = False
        if self.processing_thread:
            self.processing_thread.join(timeout=5)
        self.print_info("üì° –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def process_events_loop(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
        while self.running:
            try:
                if self.event_queue:
                    event = self.event_queue.pop(0)
                    self.process_event(event)
                else:
                    time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π
            except Exception as e:
                self.print_error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π: {e}")
                time.sleep(5)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def process_event(self, event: Event) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ —Å–æ–±—ã—Ç–∏–µ
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        if event.type in self.handlers:
            for handler in self.handlers[event.type]:
                try:
                    handler(event)
                except Exception as e:
                    self.print_error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ {handler.__name__}: {e}")
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
            event_descriptions = {
                EventType.GITHUB_WORKFLOW_EVENT: "üöÄ —Å–æ–±—ã—Ç–∏–µ workflow",
                EventType.GITHUB_PR_CREATED: "üìã –Ω–æ–≤—ã–π Pull Request",
                EventType.MANUAL_TRIGGER: "üéØ —Ä—É—á–Ω–æ–π –∑–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞",
                EventType.SYSTEM_TEST: "üß™ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–µ—Å—Ç",
                EventType.GITHUB_ISSUE_TEST: "üî¨ E2E —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ GitHub Issue"
            }
            description = event_descriptions.get(event.type, event.type.value)
            self.print_warning(f"–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è {description}")
    
    def get_pending_events_count(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏"""
        return len(self.event_queue)
    
    def clear_queue(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Å–æ–±—ã—Ç–∏–π"""
        cleared = len(self.event_queue)
        self.event_queue.clear()
        self.print_info(f"üßπ –û—á–∏—â–µ–Ω–æ {cleared} —Å–æ–±—ã—Ç–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏") 