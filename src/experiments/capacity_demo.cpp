#include <iostream>

class VectorDemo {
public:
    void demonstrate() {
        std::cout << "=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è size vs capacity ===\n\n";
        
        // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        size_ = 0;
        capacity_ = 2;
        std::cout << "1. –ù–∞—á–∞–ª–æ: size=" << size_ << ", capacity=" << capacity_ << "\n";
        print_state();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        push_back_demo(10);  // size=1, capacity=2
        push_back_demo(20);  // size=2, capacity=2 <- –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–û–ú–ï–ù–¢!
        push_back_demo(30);  // size=3, –Ω—É–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ!
    }
    
private:
    int* data_ = nullptr;
    size_t size_ = 0;
    size_t capacity_ = 0;
    
    void push_back_demo(int value—Ç–æ —á—Ç–æ –º—ã ) {
        std::cout << "\nüî∏ –î–æ–±–∞–≤–ª—è–µ–º " << value << ":\n";
        std::cout << "   –î–æ: size=" << size_ << ", capacity=" << capacity_ << "\n";
        
        // –í–û–¢ –ö–õ–Æ–ß–ï–í–û–ô –ú–û–ú–ï–ù–¢!
        if (size_ >= capacity_) {
            std::cout << "   ‚ö†Ô∏è  size >= capacity (" << size_ << " >= " << capacity_ << ")\n";
            std::cout << "   üìà –ù—É–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ!\n";
            
            size_t new_capacity = capacity_ == 0 ? 1 : capacity_ * 2;
            std::cout << "   üîÑ –†–∞—Å—à–∏—Ä—è–µ–º –¥–æ " << new_capacity << "\n";
            capacity_ = new_capacity;
        } else {
            std::cout << "   ‚úÖ –ú–µ—Å—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ (" << size_ << " < " << capacity_ << ")\n";
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
        ++size_;
        std::cout << "   –ü–æ—Å–ª–µ: size=" << size_ << ", capacity=" << capacity_ << "\n";
        print_state();
    }
    
    void print_state() {
        std::cout << "   –°–æ—Å—Ç–æ—è–Ω–∏–µ: [";
        for (size_t i = 0; i < capacity_; ++i) {
            if (i < size_) {
                std::cout << "X";  // –∑–∞–Ω—è—Ç–æ
            } else {
                std::cout << "_";  // —Å–≤–æ–±–æ–¥–Ω–æ
            }
        }
        std::cout << "]\n";
    }
};

int main() {
    VectorDemo demo;
    demo.demonstrate();
    
    std::cout << "\n=== –û–ë–™–Ø–°–ù–ï–ù–ò–ï ===\n";
    std::cout << "size == capacity:  –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–æ—Ç –∑–∞–Ω—è—Ç, –º–µ—Å—Ç–∞ –ù–ï–¢\n";
    std::cout << "size > capacity:   –û—à–∏–±–∫–∞! –ù–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å\n";
    std::cout << "size < capacity:   –ï—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã\n\n";
    
    std::cout << "–í–´–í–û–î: size >= capacity –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –û–ë–ï–ò–• –ø—Ä–æ–±–ª–µ–º!\n";
    
    return 0;
} 