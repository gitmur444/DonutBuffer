#include <vector>
#include <algorithm>
#include <ranges>
#include <iostream>
#include <chrono>
#include <random>

// ‚ùå –ù–ï–≠–§–§–ï–ö–¢–ò–í–ù–´–ô —Å–ø–æ—Å–æ–± - O(n¬≤)
void remove_even_naive(std::vector<int>& vec) {
    for (auto it = vec.begin(); it != vec.end();) {
        if (*it % 2 == 0) {
            it = vec.erase(it);  // erase() —Å–¥–≤–∏–≥–∞–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã -> O(n¬≤)
        } else {
            ++it;
        }
    }
}

// ‚úÖ –≠–§–§–ï–ö–¢–ò–í–ù–´–ô —Å–ø–æ—Å–æ–± #1: erase-remove idiom - O(n)
void remove_even_erase_remove(std::vector<int>& vec) {
    vec.erase(
        std::remove_if(vec.begin(), vec.end(), 
                      [](int x) { return x % 2 == 0; }),
        vec.end()
    );
}

// ‚úÖ –≠–§–§–ï–ö–¢–ò–í–ù–´–ô —Å–ø–æ—Å–æ–± #2: C++20 ranges - O(n)
void remove_even_ranges(std::vector<int>& vec) {
    auto new_end = std::ranges::remove_if(vec, [](int x) { return x % 2 == 0; });
    vec.erase(new_end.begin(), vec.end());
}

// ‚úÖ –≠–§–§–ï–ö–¢–ò–í–ù–´–ô —Å–ø–æ—Å–æ–± #3: –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ - O(n)
std::vector<int> remove_even_copy(const std::vector<int>& vec) {
    std::vector<int> result;
    result.reserve(vec.size());  // –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏
    
    std::ranges::copy_if(vec, std::back_inserter(result), 
                        [](int x) { return x % 2 != 0; });
    return result;
}

// ‚úÖ –°–ê–ú–´–ô –≠–§–§–ï–ö–¢–ò–í–ù–´–ô: in-place —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ - O(n)
void remove_even_in_place(std::vector<int>& vec) {
    size_t write_pos = 0;
    
    for (size_t read_pos = 0; read_pos < vec.size(); ++read_pos) {
        if (vec[read_pos] % 2 != 0) {  // –µ—Å–ª–∏ –Ω–µ—á–µ—Ç–Ω—ã–π - –æ—Å—Ç–∞–≤–ª—è–µ–º
            vec[write_pos++] = vec[read_pos];
        }
    }
    
    vec.resize(write_pos);  // –æ–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
void print_vector(const std::vector<int>& vec, const std::string& name) {
    std::cout << name << ": ";
    for (int x : vec) {
        std::cout << x << " ";
    }
    std::cout << "(size: " << vec.size() << ")\n";
}

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
std::vector<int> generate_test_data(size_t size) {
    std::vector<int> vec;
    vec.reserve(size);
    
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dis(1, 100);
    
    for (size_t i = 0; i < size; ++i) {
        vec.push_back(dis(gen));
    }
    
    return vec;
}

// –ë–µ–Ω—á–º–∞—Ä–∫
template<typename Func>
auto benchmark(Func&& func, std::vector<int> vec, const std::string& name) {
    auto start = std::chrono::high_resolution_clock::now();
    func(vec);
    auto end = std::chrono::high_resolution_clock::now();
    
    auto duration = std::chrono::duration_cast<std::chrono::microseconds>(end - start);
    std::cout << name << ": " << duration.count() << " Œºs\n";
    
    return vec;
}

int main() {
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –Ω–µ–±–æ–ª—å—à–æ–º –ø—Ä–∏–º–µ—Ä–µ
    std::cout << "=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–∞–ª–µ–Ω—å–∫–æ–º –≤–µ–∫—Ç–æ—Ä–µ ===\n";
    std::vector<int> demo_vec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    print_vector(demo_vec, "–ò—Å—Ö–æ–¥–Ω—ã–π");
    
    auto vec1 = demo_vec;
    remove_even_erase_remove(vec1);
    print_vector(vec1, "Erase-remove");
    
    auto vec2 = demo_vec;
    remove_even_ranges(vec2);
    print_vector(vec2, "C++20 ranges");
    
    auto vec3 = remove_even_copy(demo_vec);
    print_vector(vec3, "Copy");
    
    auto vec4 = demo_vec;
    remove_even_in_place(vec4);
    print_vector(vec4, "In-place");
    
    // –ë–µ–Ω—á–º–∞—Ä–∫ –Ω–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    std::cout << "\n=== –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (100,000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤) ===\n";
    const size_t test_size = 100000;
    auto test_data = generate_test_data(test_size);
    
    std::cout << "–ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: " << test_data.size() << " —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n\n";
    
    auto result1 = benchmark([](std::vector<int>& v) { remove_even_erase_remove(v); }, 
                            test_data, "Erase-remove");
    
    auto result2 = benchmark([](std::vector<int>& v) { remove_even_ranges(v); }, 
                            test_data, "C++20 ranges");
    
    auto result3 = benchmark([](std::vector<int> v) -> std::vector<int> { return remove_even_copy(v); }, 
                            test_data, "Copy method");
    
    auto result4 = benchmark([](std::vector<int>& v) { remove_even_in_place(v); }, 
                            test_data, "In-place");
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã
    std::cout << "\n–†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Ä–∞–∑–º–µ—Ä: " << result1.size() << " —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n";
    
    std::cout << "\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ in-place –º–µ—Ç–æ–¥ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!\n";
    
    return 0;
} 