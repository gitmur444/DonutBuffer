#include <iostream>

template<typename T>
class VectorSizeDemo {
public:
    void demonstrate() {
        std::cout << "=== Capacity: —ç–ª–µ–º–µ–Ω—Ç—ã vs –±–∞–π—Ç—ã ===\n\n";
        
        std::cout << "sizeof(T) = " << sizeof(T) << " –±–∞–π—Ç\n";
        std::cout << "capacity_ = " << capacity_ << " –≠–õ–ï–ú–ï–ù–¢–û–í\n";
        std::cout << "–û–±—â–∞—è –ø–∞–º—è—Ç—å = " << capacity_ * sizeof(T) << " –±–∞–π—Ç\n\n";
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for (int i = 1; i <= 5; ++i) {
            push_back_demo(static_cast<T>(i * 10));
        }
    }

private:
    T* data_ = nullptr;
    size_t size_ = 0;
    size_t capacity_ = 2;  // 2 –≠–õ–ï–ú–ï–ù–¢–ê, –Ω–µ –±–∞–π—Ç–∞!
    
    void push_back_demo(T value) {
        std::cout << "üî∏ –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç " << value << " (—Ä–∞–∑–º–µ—Ä: " << sizeof(T) << " –±–∞–π—Ç)\n";
        std::cout << "   size=" << size_ << ", capacity=" << capacity_ << " —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n";
        
        // –ö–õ–Æ–ß–ï–í–û–ô –ú–û–ú–ï–ù–¢: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≠–õ–ï–ú–ï–ù–¢–û–í!
        if (size_ >= capacity_) {
            std::cout << "   ‚ùå –ú–µ—Å—Ç–∞ –Ω–µ—Ç: " << size_ << " >= " << capacity_ << " —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n";
            std::cout << "   üìà –†–∞—Å—à–∏—Ä—è–µ–º capacity —Å " << capacity_;
            capacity_ *= 2;
            std::cout << " –¥–æ " << capacity_ << " —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n";
            std::cout << "   üíæ –ù–æ–≤–∞—è –ø–∞–º—è—Ç—å: " << capacity_ * sizeof(T) << " –±–∞–π—Ç\n";
        } else {
            std::cout << "   ‚úÖ –ú–µ—Å—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ: " << size_ << " < " << capacity_ << " —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n";
        }
        
        ++size_;
        std::cout << "   –†–µ–∑—É–ª—å—Ç–∞—Ç: size=" << size_ << ", capacity=" << capacity_ << "\n\n";
    }
};

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
int main() {
    std::cout << "=== –í–ê–ñ–ù–û–ï –ü–û–ù–ò–ú–ê–ù–ò–ï ===\n";
    std::cout << "capacity –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –≤ –≠–õ–ï–ú–ï–ù–¢–ê–•, –Ω–µ –≤ –±–∞–π—Ç–∞—Ö!\n\n";
    
    std::cout << "1. Vector<int>:\n";
    VectorSizeDemo<int> demo_int;
    demo_int.demonstrate();
    
    std::cout << "\n2. Vector<double>:\n";
    VectorSizeDemo<double> demo_double;
    demo_double.demonstrate();
    
    std::cout << "=== –û–ë–™–Ø–°–ù–ï–ù–ò–ï ===\n";
    std::cout << "‚Ä¢ capacity = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–∏–ø–∞ T\n";
    std::cout << "‚Ä¢ –ö–∞–∂–¥—ã–π push_back –¥–æ–±–∞–≤–ª—è–µ—Ç –û–î–ò–ù —ç–ª–µ–º–µ–Ω—Ç\n";
    std::cout << "‚Ä¢ –†–∞–∑–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –ª–æ–≥–∏–∫—É —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è\n";
    std::cout << "‚Ä¢ –ê–ª–ª–æ–∫–∞—Ç–æ—Ä —É–∂–µ –∑–Ω–∞–µ—Ç sizeof(T)\n\n";
    
    std::cout << "–í–´–í–û–î: size >= capacity - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞!\n";
    std::cout << "–ù–ï –ù–£–ñ–ù–û: size + 1 > capacity (–∏–∑–±—ã—Ç–æ—á–Ω–æ)\n";
    std::cout << "–ù–ï –ù–£–ñ–ù–û: size * sizeof(T) >= capacity * sizeof(T)\n";
    
    return 0;
} 